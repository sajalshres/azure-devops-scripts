async def process_definition(azdo, project, definition, target_env_name, semaphore):
    async with semaphore:
        def_id = definition["id"]
        try:
            full_def = await azdo.get_release_definition(project, def_id)
            result = {
                "project": project,
                "definition_id": def_id,
                "definition_name": full_def["name"],
                "env_name": None,
                "updated": False,
                "status": ""
            }

            for env in full_def.get("environments", []):
                if env["name"].lower() == target_env_name.lower():
                    result["env_name"] = env["name"]
                    opts = env["preDeployApprovals"]["approvalOptions"]
                    if opts.get("releaseCreatorCanBeApprover", True):
                        # Script updates it
                        opts["releaseCreatorCanBeApprover"] = False
                        result["updated"] = True
                        result["status"] = "Updated"
                        print(f"Updated '{env['name']}' in '{full_def['name']}' ({project})")
                        await azdo.update_release_definition(project, full_def)
                    else:
                        # Already compliant; still include in report
                        result["updated"] = True
                        result["status"] = "Already compliant"
                        print(f"Already compliant '{env['name']}' in '{full_def['name']}' ({project})")

            return result
        except Exception as e:
            print(f"Failed to process definition '{definition.get('name')}' in '{project}': {str(e)}")
            return {}
