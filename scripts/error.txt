async def process_definition(azdo, project, definition, target_env_name, semaphore):
    async with semaphore:
        def_id = definition["id"]
        try:
            full_def = await azdo.get_release_definition(project, def_id)
            result = {
                "project": project,
                "definition_id": def_id,
                "definition_name": full_def["name"],
                "env_name": None,
                "updated": False,
                "status": "Already compliant",
            }

            updated = False
            for env in full_def.get("environments", []):
                if env["name"].lower() == target_env_name.lower():
                    opts = env["preDeployApprovals"]["approvalOptions"]
                    if opts.get("releaseCreatorCanBeApprover", True):
                        opts["releaseCreatorCanBeApprover"] = False
                        updated = True
                        result["status"] = "Updated by script"
                        print(
                            f"[INFO] Updated '{env['name']}' in '{full_def['name']}' ({project})"
                        )
                    else:
                        result["status"] = "Already compliant"
                        print(
                            f"[INFO] Already enforced for '{env['name']}' in '{full_def['name']}' ({project})"
                        )
                    result["env_name"] = env["name"]

            # Push the update to Azure DevOps if something changed
            if updated:
                result["updated"] = True
                if not azdo.dry_run:
                    await azdo.update_release_definition(project, full_def)

            return result

        except Exception as e:
            print(
                f"[ERROR] Failed to process definition '{definition.get('name')}' in '{project}': {str(e)}"
            )
            return {}
